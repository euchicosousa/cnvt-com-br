import {
  AsteriskIcon,
  CaseUpperIcon,
  CopyIcon,
  MoveHorizontal,
  TypeIcon,
} from "lucide-react";
import { useState, type JSX } from "react";
import { Logo } from "~/components/Logo";
import type { Route } from "./+types/home";
import { Link } from "react-router";

const unicodeStyles = [
  {
    name: "Bold Serif",
    map: {
      A: "ùêÄ",
      B: "ùêÅ",
      C: "ùêÇ",
      D: "ùêÉ",
      E: "ùêÑ",
      F: "ùêÖ",
      G: "ùêÜ",
      H: "ùêá",
      I: "ùêà",
      J: "ùêâ",
      K: "ùêä",
      L: "ùêã",
      M: "ùêå",
      N: "ùêç",
      O: "ùêé",
      P: "ùêè",
      Q: "ùêê",
      R: "ùêë",
      S: "ùêí",
      T: "ùêì",
      U: "ùêî",
      V: "ùêï",
      W: "ùêñ",
      X: "ùêó",
      Y: "ùêò",
      Z: "ùêô",
      a: "ùêö",
      b: "ùêõ",
      c: "ùêú",
      d: "ùêù",
      e: "ùêû",
      f: "ùêü",
      g: "ùê†",
      h: "ùê°",
      i: "ùê¢",
      j: "ùê£",
      k: "ùê§",
      l: "ùê•",
      m: "ùê¶",
      n: "ùêß",
      o: "ùê®",
      p: "ùê©",
      q: "ùê™",
      r: "ùê´",
      s: "ùê¨",
      t: "ùê≠",
      u: "ùêÆ",
      v: "ùêØ",
      w: "ùê∞",
      x: "ùê±",
      y: "ùê≤",
      z: "ùê≥",
      √°: "ùêöÃÅ",
      √©: "ùêûÃÅ",
      √≠: "ùê¢ÃÅ",
      √≥: "ùê®ÃÅ",
      √∫: "ùêÆÃÅ",
      √†: "ùêöÃÄ",
      √®: "ùêûÃÄ",
      √¨: "ùê¢ÃÄ",
      √≤: "ùê®ÃÄ",
      √π: "ùêÆÃÄ",
      √¢: "ùêöÃÇ",
      √™: "ùêûÃÇ",
      √Æ: "ùê¢ÃÇ",
      √¥: "ùê®ÃÇ",
      √ª: "ùêÆÃÇ",
      √£: "ùêöÃÉ",
      √µ: "ùê®ÃÉ",
      √ß: "ùêúÃß",
    },
  },
  {
    name: "ùóïùóºùóπùó± ùó¶ùóÆùóªùòÄ",
    map: Object.fromEntries(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        .split("")
        .map((c, i) => [c, String.fromCodePoint(0x1d5d4 + i)])
    ),
  },
  {
    name: "ùòºùô°ùô© ùôÑùô©ùôñùô°ùôûùôò ùôéùôñùô£ùô®",
    map: Object.fromEntries(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        .split("")
        .map((c, i) => [c, String.fromCodePoint(0x1d63c + i)])
    ),
  },
  {
    name: "ùòàùò≠ùòµ ùòàùò™ùò≥ùò∫",
    map: Object.fromEntries(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        .split("")
        .map((c, i) => [c, String.fromCodePoint(0x1d434 + i)])
    ),
  },
  {
    name: "ùë©ùíêùíçùíÖ ùë∞ùíïùíÇùíçùíäùíÑ",
    map: Object.fromEntries(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        .split("")
        .map((c, i) => [c, String.fromCodePoint(0x1d468 + i)])
    ),
  },
  {
    name: "ùôàùô§ùô£ùô§ùô®ùô•ùôñùôòùôö",
    map: Object.fromEntries(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        .split("")
        .map((c, i) => [c, String.fromCodePoint(0x1d670 + i)])
    ),
  },
  {
    name: "Ôº¶ÔΩïÔΩåÔΩå ÔΩóÔΩâÔΩÑÔΩîÔΩà",
    map: Object.fromEntries(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        .split("")
        .map((c, i) => [
          c,
          String.fromCodePoint(0xff21 + (i >= 26 ? i - 26 : i)),
        ])
    ),
  },
  {
    name: "ùîªùï†ùï¶ùïìùïùùïñ ùïäùï•ùï£ùï¶ùïîùïú",
    map: Object.fromEntries(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        .split("")
        .map((c, i) => [
          c,
          String.fromCodePoint(0x1d538 + (i >= 26 ? i - 26 + 26 : i)),
        ])
    ),
  },
  {
    name: "ùîäùî¨ùî±ùî•ùî¶ùî†",
    map: Object.fromEntries(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        .split("")
        .map((c, i) => [c, String.fromCodePoint(0x1d504 + i)])
    ),
  },
  {
    name: "ùì¢ùì¨ùìªùì≤ùìπùìΩ",
    map: Object.fromEntries(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        .split("")
        .map((c, i) => [c, String.fromCodePoint(0x1d4d0 + i)])
    ),
  },
  {
    name: "TÃ∂eÃ∂xÃ∂tÃ∂oÃ∂ Ã∂rÃ∂aÃ∂sÃ∂uÃ∂rÃ∂aÃ∂dÃ∂oÃ∂",
    map: Object.fromEntries(
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
        .split("")
        .map((c) => [c, c + "\u0336"])
    ), // strikethrough
  },
  {
    name: "Íú±·¥ç·¥Ä ü ü ·¥Ñ·¥Ä·¥òÍú±",
    map: {
      a: "·¥Ä",
      b: " ô",
      c: "·¥Ñ",
      d: "·¥Ö",
      e: "·¥á",
      f: "Íú∞",
      g: "…¢",
      h: " ú",
      i: "…™",
      j: "·¥ä",
      k: "·¥ã",
      l: " ü",
      m: "·¥ç",
      n: "…¥",
      o: "·¥è",
      p: "·¥ò",
      q: "«´",
      r: " Ä",
      s: "Íú±",
      t: "·¥õ",
      u: "·¥ú",
      v: "·¥†",
      w: "·¥°",
      x: "x",
      y: " è",
      z: "·¥¢",
      A: "A",
      B: "B",
      C: "C",
      D: "D",
      E: "E",
      F: "F",
      G: "G",
      H: "H",
      I: "I",
      J: "J",
      K: "K",
      L: "L",
      M: "M",
      N: "N",
      O: "O",
      P: "P",
      Q: "Q",
      R: "R",
      S: "S",
      T: "T",
      U: "U",
      V: "V",
      W: "W",
      X: "X",
      Y: "Y",
      Z: "Z",
    },
  },
  {
    name: "∆¨Œ£X∆¨”® …¢ Ä·¥á·¥á·¥ã",
    map: {
      T: "∆¨",
      e: "Œ£",
      s: "∆ß",
      t: "∆¨",
      d: "D",
      x: "X",
      o: "”®",
      a: "Œõ",
      i: "Œô",
      u: "–¶",
      r: "–Ø",
      n: "–ò",
      c: "œæ",
      l: "L",
      A: "Œõ",
      E: "Œ£",
      O: "Œò",
      D: "√ê",
      X: "–ñ",
    },
  },
  // Adicione os outros estilos aqui conforme necess√°rio
];

function transformText(text: string, map: Record<string, string>) {
  return text
    .split("")
    .map((char) => map[char] || char)
    .join("");
}

function getText(
  text: string,
  uppercase: boolean,
  tracking: "wide" | "widest" | "normal"
) {
  return (uppercase ? text.toUpperCase() : text)
    .split("")
    .join(
      tracking === "wide"
        ? "\u00A0"
        : tracking === "widest"
        ? "\u00A0\u00A0"
        : ""
    );
}

export function meta({}: Route.MetaArgs) {
  return [{ title: "Ferramentas | CNVT¬Æ - Ag√™ncia de Marketing 360¬∫" }];
}

export default function Ferramentas() {
  const [text, setText] = useState("");
  const [isUppercase, setIsUppercase] = useState(false);
  const [isTracking, setIsTracking] = useState<"normal" | "wide" | "widest">(
    "normal"
  );
  const [isFont, setIsFont] = useState(false);

  return (
    <>
      <div className="flex flex-col justify-between h-full">
        <div className="flex gap-4 items-center justify-between p-12 md:border-r border-b">
          <Link to={"/"}>
            <Logo className="size-8 md:size-12" />
          </Link>
          <div className="text-2xl font-medium uppercase tracking-widest">
            Ferramentas
          </div>
        </div>
      </div>

      <div className="tabs h-full shrink-0 grow">
        <div className="flex-col">
          <div className="flex border-b justify-between md:justify-start">
            <button
              className={`p-8 ${
                isUppercase ? "bg-zinc-100 text-zinc-950" : ""
              }`}
              onClick={() => setIsUppercase((prev) => !prev)}
            >
              <CaseUpperIcon className="size-16" />
            </button>
            <button
              className={`p-8 relative ${
                isTracking !== "normal" ? "bg-zinc-100 text-zinc-950" : ""
              }`}
              onClick={() =>
                setIsTracking((prev) =>
                  prev === "normal"
                    ? "wide"
                    : prev === "wide"
                    ? "widest"
                    : "normal"
                )
              }
            >
              <MoveHorizontal className="size-16" />
              {isTracking === "widest" && (
                <AsteriskIcon className="size-12 absolute top-2 right-2" />
              )}
            </button>
            <button
              className={`p-8 ${isFont ? "bg-zinc-100 text-zinc-950" : ""}`}
              onClick={() => setIsFont((prev) => !prev)}
            >
              <TypeIcon className="size-16" />
            </button>
          </div>
          <div className="p-8">
            <input
              value={text}
              className="text-2xl bg-zinc-900 p-8 w-full mb-4 outline-none focus:ring-2"
              onChange={(e) => setText(e.target.value)}
              placeholder="Seu texto aqui"
            />
            {(isUppercase || isTracking !== "normal") && (
              <TextLine text={getText(text, isUppercase, isTracking)}>
                {getText(text, isUppercase, isTracking)}
              </TextLine>
            )}
            {isFont && (
              <div className="flex flex-col gap2">
                {unicodeStyles.map((style) => (
                  <TextLine
                    key={style.name}
                    text={transformText(
                      getText(text, isUppercase, isTracking),
                      style.map
                    )}
                  >
                    <div className="text-sm">{style.name}</div>
                    <div className="mt-2">
                      {transformText(
                        getText(text, isUppercase, isTracking),
                        style.map
                      )}
                    </div>
                  </TextLine>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="font-medium tracking-wider p-12 text-xs border-t">
        ONDE PARCERIA VIRA RESULTADO
      </div>
    </>
  );
}

const TextLine = ({
  text,
  children,
}: {
  text: string;
  children: JSX.Element | string | JSX.Element[];
}) => {
  const handleCopy = async (copyText: string) => {
    try {
      await navigator.clipboard.writeText(copyText);
      alert("Copiado!");
    } catch (err) {
      console.error("Erro ao copiar:", err);
    }
  };

  return (
    <div
      className="p-8 text-xl  font-medium border items-center flex justify-between"
      onClick={(e) => handleCopy(text)}
    >
      <div>{children}</div>
      <div>
        <CopyIcon className="size-8" />
      </div>
    </div>
  );
};
